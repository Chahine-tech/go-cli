name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ["1.23", "1.24"]

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Build
        run: go build -v ./...

      - name: Run tests
        run: go test -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.22'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m --out-format=colored-line-number

  security:
    name: Security
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - name: Run Gosec Security Scanner
        uses: cosmos/gosec@master
        with:
          args: "./..."

      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

  build-artifacts:
    name: Build Artifacts
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir -p dist
          if [ "$GOOS" = "windows" ]; then
            go build -ldflags="-s -w" -o dist/loganalyzer-${{ matrix.goos }}-${{ matrix.goarch }}.exe main.go
          else
            go build -ldflags="-s -w" -o dist/loganalyzer-${{ matrix.goos }}-${{ matrix.goarch }} main.go
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: loganalyzer-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - name: Build application
        run: go build -o loganalyzer main.go

      - name: Create test log files
        run: |
          echo "Sample log content 1" > test1.log
          echo "Sample log content 2" > test2.log

      - name: Create test configuration
        run: |
          cat > integration-test-config.json << EOF
          [
            {
              "id": "test1",
              "path": "./test1.log",
              "type": "test log"
            },
            {
              "id": "test2",
              "path": "./test2.log",
              "type": "test log"
            },
            {
              "id": "missing",
              "path": "./missing.log",
              "type": "test missing"
            }
          ]
          EOF

      - name: Run integration test
        run: |
          ./loganalyzer analyze -c integration-test-config.json -o integration-results.json

      - name: Verify output file exists
        run: |
          if [ ! -f integration-results.json ]; then
            echo "Integration test failed: output file not created"
            exit 1
          fi
          echo "Integration test passed: output file created successfully"

      - name: Verify JSON output format
        run: |
          if ! jq empty integration-results.json; then
            echo "Integration test failed: invalid JSON output"
            exit 1
          fi
          echo "Integration test passed: valid JSON output"

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: integration-results.json
